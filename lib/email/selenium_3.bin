TWFyd2Fu
CmltcG9ydCBwc3V0aWwKZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBvcwppbXBvcnQganNvbgppbXBvcnQgdGltZQpwcmludCgiQ29tcGFyaW5nIGRhdGEuLi4iKQp0aW1lLnNsZWVwKDIpCmFsbG93ZWRfZGV2aWNlX2lkID0gIjUyOjU0OjAzOmI3OmUxOmQ2IgoKY3VycmVudF9tYWMgPSBwc3V0aWwubmV0X2lmX2FkZHJzKClbJ0V0aGVybmV0J11bMF0uYWRkcmVzcy5yZXBsYWNlKCItIiwgIjoiKQpjdXJyZW50X2RldmljZV9pZCA9ICc6Jy5qb2luKFsnezowMnh9Jy5mb3JtYXQoaW50KGIsIDE2KSkgZm9yIGIgaW4gY3VycmVudF9tYWMuc3BsaXQoJzonKV0pCgoKaWYgY3VycmVudF9kZXZpY2VfaWQgPT0gYWxsb3dlZF9kZXZpY2VfaWQ6CiAgICBkZWYgZGVjcnlwdF9jb2RlKGNpcGhlcnRleHQsIGtleSk6CiAgICAgICAgbm9uY2UgPSBjaXBoZXJ0ZXh0WzoxNl0KICAgICAgICB0YWcgPSBjaXBoZXJ0ZXh0Wy0xNjpdCiAgICAgICAgY2lwaGVydGV4dCA9IGNpcGhlcnRleHRbMTY6LTE2XQogICAgICAgIGNpcGhlciA9IEFFUy5uZXcoa2V5LCBBRVMuTU9ERV9FQVgsIG5vbmNlPW5vbmNlKQogICAgICAgIHBsYWludGV4dCA9IGNpcGhlci5kZWNyeXB0KGNpcGhlcnRleHQpLmRlY29kZSgndXRmLTgnKQogICAgICAgIHJldHVybiBwbGFpbnRleHQKICAgIHdpdGggb3BlbihyIkNvbmZpZ1xzZXR0aW5ncy5qc29uIiwgInIiKSBhcyBzZXR0aW5nc19maWxlOgogICAgICAgIHNldHRpbmdzX2RhdGEgPSBqc29uLmxvYWQoc2V0dGluZ3NfZmlsZSkKICAgICAgICB1c2VyX2tleSA9IHNldHRpbmdzX2RhdGFbInBhc3N3b3JkIl0KCiAgICB1c2VyX2tleV9ieXRlcyA9IHVzZXJfa2V5LmVuY29kZSgndXRmLTgnKQoKICAgIGlmIG9zLnBhdGguZXhpc3RzKChyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIikpOgogICAgICAgIHdpdGggb3BlbigociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpLCAicmIiKSBhcyBmOgogICAgICAgICAgICBlbmNyeXB0ZWQgPSBmLnJlYWQoKQogICAgICAgIG5vbmNlID0gZW5jcnlwdGVkWzoxNl0KICAgICAgICBjaXBoZXJ0ZXh0ID0gZW5jcnlwdGVkWzE2Ol0KCgogICAgICAgIHRyeToKICAgICAgICAgICAgY2lwaGVyID0gQUVTLm5ldyh1c2VyX2tleV9ieXRlcywgQUVTLk1PREVfRUFYLCBub25jZT1ub25jZSkKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgcHJpbnQoIkluY29ycmVjdCBrZXkhIikKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpOgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKHIibGliXGN0eXBlc1xjcnlwdG9fbWFpbi5iaW4iKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJceG1sXHRhdGVzLmJpbiIpOgogICAgICAgICAgICAgICAgb3MucmVtb3ZlKHIibGliXHhtbFx0YXRlcy5iaW4iKQogICAgICAgICAgICAKCiAgICAgICAgICAgIGlucHV0KCJwcmVzcyBpbnRlciB0byBleGl0Li4iKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHIibGliXHhtbFx0YXRlcy5iaW4iKToKICAgICAgICAgICAgd2l0aCBvcGVuKHIibGliXHhtbFx0YXRlcy5iaW4iLCAicmIiKSBhcyBkYXRlX2ZpbGU6CiAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfZXhwaXJhdGlvbl9kYXRlID0gZGF0ZV9maWxlLnJlYWQoKQogICAgICAgICAgICAgICAgZXhwaXJhdGlvbl9kYXRlID0gZGVjcnlwdF9jb2RlKGVuY3J5cHRlZF9leHBpcmF0aW9uX2RhdGUsIHVzZXJfa2V5X2J5dGVzKQoKICAgICAgICAgICAgZXhwaXJhdGlvbl9kYXRlID0gZGF0ZXRpbWUuZGF0ZXRpbWUuc3RycHRpbWUoZXhwaXJhdGlvbl9kYXRlLCAiJVktJW0tJWQgJUg6JU06JVMiKQoKICAgICAgICAgICAgY3VycmVudF90aW1lID0gZGF0ZXRpbWUuZGF0ZXRpbWUubm93KCkKICAgICAgICAgICAgaWYgY3VycmVudF90aW1lID4gZXhwaXJhdGlvbl9kYXRlOgogICAgICAgICAgICAgICAgcHJpbnQoIlRoZSBkZWNyeXB0aW9uIGtleSBoYXMgZXhwaXJlZC4gQ2Fubm90IHJ1biB0aGUgY29kZS4iKQogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpOgogICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJceG1sXHRhdGVzLmJpbiIpOgogICAgICAgICAgICAgICAgICAgIG9zLnJlbW92ZShyImxpYlx4bWxcdGF0ZXMuYmluIikKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaW5wdXQoInByZXNzIGludGVyIHRvIGV4aXQuLiIpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cygociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpKToKICAgICAgICAgICAgICAgICAgICB3aXRoIG9wZW4ociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIsICJyYiIpIGFzIGNvZGVfZmlsZToKICAgICAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkX2NvZGUgPSBjb2RlX2ZpbGUucmVhZCgpCiAgICAgICAgICAgICAgICAgICAgICAgIGRlY3J5cHRlZF9jb2RlID0gZGVjcnlwdF9jb2RlKGVuY3J5cHRlZF9jb2RlLCB1c2VyX2tleV9ieXRlcykKICAgICAgICAgICAgICAgICAgICAgICAgZXhlYyhkZWNyeXB0ZWRfY29kZSkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoIkVycm9yOiBZb3UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIHRvIGVudGVyLiBQbGVhc2UgY29udGFjdCB0aGUgb3duZXIgLCBEaXNjb3JkOiBtYXI0d2FuIikKICAgICAgICAgICAgICAgICAgICBpbnB1dCgicHJlc3MgaW50ZXIgdG8gZXhpdC4uIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiRXJyb3I6IFlvdSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgdG8gZW50ZXIuIFBsZWFzZSBjb250YWN0IHRoZSBvd25lciAsIERpc2NvcmQ6IG1hcjR3YW4iKQogICAgICAgICAgICBpbnB1dCgicHJlc3MgaW50ZXIgdG8gZXhpdC4uIikKICAgIGVsc2U6CiAgICAgICAgcHJpbnQoIkVycm9yOiBZb3UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIHRvIGVudGVyLiBQbGVhc2UgY29udGFjdCB0aGUgb3duZXIgLCBEaXNjb3JkOiBtYXI0d2FuIikKICAgICAgICBpbnB1dCgicHJlc3MgaW50ZXIgdG8gZXhpdC4uIikKCmVsc2U6CiAgICBwcmludCgiT2ggc29ycnkhICwgWW91IGFyZSBub3QgYWxsb3dlZCB0byBlbnRlciEiKQogICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpOgogICAgICAgIG9zLnJlbW92ZShyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIikKICAgICAgICAKICAgIGlmIG9zLnBhdGguZXhpc3RzKHIibGliXHhtbFx0YXRlcy5iaW4iKToKICAgICAgICBvcy5yZW1vdmUociJsaWJceG1sXHRhdGVzLmJpbiIpCiAgICAgICAgCiAgICBpbnB1dCgicHJlc3MgaW50ZXIgdG8gZXhpdC4uIikK