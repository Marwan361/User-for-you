TWFyd2Fu
CmltcG9ydCBwc3V0aWwKZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBvcwppbXBvcnQganNvbgppbXBvcnQgdGltZQpwcmludCgiQ29tcGFyaW5nIGRhdGEuLi4iKQp0aW1lLnNsZWVwKDIpCmFsbG93ZWRfZGV2aWNlX2lkID0gImJjOjVmOmY0OjQ1OjAwOmVmIgoKY3VycmVudF9tYWMgPSBwc3V0aWwubmV0X2lmX2FkZHJzKClbJ0V0aGVybmV0IDInXVswXS5hZGRyZXNzLnJlcGxhY2UoIi0iLCAiOiIpCmN1cnJlbnRfZGV2aWNlX2lkID0gJzonLmpvaW4oWyd7OjAyeH0nLmZvcm1hdChpbnQoYiwgMTYpKSBmb3IgYiBpbiBjdXJyZW50X21hYy5zcGxpdCgnOicpXSkKCgppZiBjdXJyZW50X2RldmljZV9pZCA9PSBhbGxvd2VkX2RldmljZV9pZDoKICAgIGRlZiBkZWNyeXB0X2NvZGUoY2lwaGVydGV4dCwga2V5KToKICAgICAgICBub25jZSA9IGNpcGhlcnRleHRbOjE2XQogICAgICAgIHRhZyA9IGNpcGhlcnRleHRbLTE2Ol0KICAgICAgICBjaXBoZXJ0ZXh0ID0gY2lwaGVydGV4dFsxNjotMTZdCiAgICAgICAgY2lwaGVyID0gQUVTLm5ldyhrZXksIEFFUy5NT0RFX0VBWCwgbm9uY2U9bm9uY2UpCiAgICAgICAgcGxhaW50ZXh0ID0gY2lwaGVyLmRlY3J5cHQoY2lwaGVydGV4dCkuZGVjb2RlKCd1dGYtOCcpCiAgICAgICAgcmV0dXJuIHBsYWludGV4dAogICAgd2l0aCBvcGVuKHIiQ29uZmlnXHNldHRpbmdzLmpzb24iLCAiciIpIGFzIHNldHRpbmdzX2ZpbGU6CiAgICAgICAgc2V0dGluZ3NfZGF0YSA9IGpzb24ubG9hZChzZXR0aW5nc19maWxlKQogICAgICAgIHVzZXJfa2V5ID0gc2V0dGluZ3NfZGF0YVsicGFzc3dvcmQiXQoKICAgIHVzZXJfa2V5X2J5dGVzID0gdXNlcl9rZXkuZW5jb2RlKCd1dGYtOCcpCgogICAgaWYgb3MucGF0aC5leGlzdHMoKHIibGliXGN0eXBlc1xjcnlwdG9fbWFpbi5iaW4iKSk6CiAgICAgICAgd2l0aCBvcGVuKChyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIiksICJyYiIpIGFzIGY6CiAgICAgICAgICAgIGVuY3J5cHRlZCA9IGYucmVhZCgpCiAgICAgICAgbm9uY2UgPSBlbmNyeXB0ZWRbOjE2XQogICAgICAgIGNpcGhlcnRleHQgPSBlbmNyeXB0ZWRbMTY6XQoKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBjaXBoZXIgPSBBRVMubmV3KHVzZXJfa2V5X2J5dGVzLCBBRVMuTU9ERV9FQVgsIG5vbmNlPW5vbmNlKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICBwcmludCgiSW5jb3JyZWN0IGtleSEiKQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIik6CiAgICAgICAgICAgICAgICBvcy5yZW1vdmUociJsaWJcY3R5cGVzXGNyeXB0b19tYWluLmJpbiIpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyImxpYlx4bWxcdGF0ZXMuYmluIik6CiAgICAgICAgICAgICAgICBvcy5yZW1vdmUociJsaWJceG1sXHRhdGVzLmJpbiIpCiAgICAgICAgICAgIAoKICAgICAgICAgICAgaW5wdXQoInByZXNzIGludGVyIHRvIGV4aXQuLiIpCiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJceG1sXHRhdGVzLmJpbiIpOgogICAgICAgICAgICB3aXRoIG9wZW4ociJsaWJceG1sXHRhdGVzLmJpbiIsICJyYiIpIGFzIGRhdGVfZmlsZToKICAgICAgICAgICAgICAgIGVuY3J5cHRlZF9leHBpcmF0aW9uX2RhdGUgPSBkYXRlX2ZpbGUucmVhZCgpCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uX2RhdGUgPSBkZWNyeXB0X2NvZGUoZW5jcnlwdGVkX2V4cGlyYXRpb25fZGF0ZSwgdXNlcl9rZXlfYnl0ZXMpCgogICAgICAgICAgICBleHBpcmF0aW9uX2RhdGUgPSBkYXRldGltZS5kYXRldGltZS5zdHJwdGltZShleHBpcmF0aW9uX2RhdGUsICIlWS0lbS0lZCAlSDolTTolUyIpCgogICAgICAgICAgICBjdXJyZW50X3RpbWUgPSBkYXRldGltZS5kYXRldGltZS5ub3coKQogICAgICAgICAgICBpZiBjdXJyZW50X3RpbWUgPiBleHBpcmF0aW9uX2RhdGU6CiAgICAgICAgICAgICAgICBwcmludCgiVGhlIGRlY3J5cHRpb24ga2V5IGhhcyBleHBpcmVkLiBDYW5ub3QgcnVuIHRoZSBjb2RlLiIpCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIik6CiAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKHIibGliXGN0eXBlc1xjcnlwdG9fbWFpbi5iaW4iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyImxpYlx4bWxcdGF0ZXMuYmluIik6CiAgICAgICAgICAgICAgICAgICAgb3MucmVtb3ZlKHIibGliXHhtbFx0YXRlcy5iaW4iKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpbnB1dCgicHJlc3MgaW50ZXIgdG8gZXhpdC4uIikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKChyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIikpOgogICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIiwgInJiIikgYXMgY29kZV9maWxlOgogICAgICAgICAgICAgICAgICAgICAgICBlbmNyeXB0ZWRfY29kZSA9IGNvZGVfZmlsZS5yZWFkKCkKICAgICAgICAgICAgICAgICAgICAgICAgZGVjcnlwdGVkX2NvZGUgPSBkZWNyeXB0X2NvZGUoZW5jcnlwdGVkX2NvZGUsIHVzZXJfa2V5X2J5dGVzKQogICAgICAgICAgICAgICAgICAgICAgICBleGVjKGRlY3J5cHRlZF9jb2RlKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBwcmludCgiRXJyb3I6IFlvdSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgdG8gZW50ZXIuIFBsZWFzZSBjb250YWN0IHRoZSBvd25lciAsIERpc2NvcmQ6IG1hcjR3YW4iKQogICAgICAgICAgICAgICAgICAgIGlucHV0KCJwcmVzcyBpbnRlciB0byBleGl0Li4iKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJFcnJvcjogWW91IGFyZSBubyBsb25nZXIgYWxsb3dlZCB0byBlbnRlci4gUGxlYXNlIGNvbnRhY3QgdGhlIG93bmVyICwgRGlzY29yZDogbWFyNHdhbiIpCiAgICAgICAgICAgIGlucHV0KCJwcmVzcyBpbnRlciB0byBleGl0Li4iKQogICAgZWxzZToKICAgICAgICBwcmludCgiRXJyb3I6IFlvdSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgdG8gZW50ZXIuIFBsZWFzZSBjb250YWN0IHRoZSBvd25lciAsIERpc2NvcmQ6IG1hcjR3YW4iKQogICAgICAgIGlucHV0KCJwcmVzcyBpbnRlciB0byBleGl0Li4iKQoKZWxzZToKICAgIHByaW50KCJPaCBzb3JyeSEgLCBZb3UgYXJlIG5vdCBhbGxvd2VkIHRvIGVudGVyISIpCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhyImxpYlxjdHlwZXNcY3J5cHRvX21haW4uYmluIik6CiAgICAgICAgb3MucmVtb3ZlKHIibGliXGN0eXBlc1xjcnlwdG9fbWFpbi5iaW4iKQogICAgICAgIAogICAgaWYgb3MucGF0aC5leGlzdHMociJsaWJceG1sXHRhdGVzLmJpbiIpOgogICAgICAgIG9zLnJlbW92ZShyImxpYlx4bWxcdGF0ZXMuYmluIikKICAgICAgICAKICAgIGlucHV0KCJwcmVzcyBpbnRlciB0byBleGl0Li4iKQo=